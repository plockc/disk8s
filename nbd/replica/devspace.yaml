version: v2beta1
name: replicagit

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      devspace run protobuf
      start_dev app                # 3. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      # this container deployed through parent controller, so just build the image so it is ready
      run_pipelines build
  # You can run this pipeline via `devspace build` (or `devspace run-pipeline build`)
  build:
    run: |-
      run_pipelines protobuf
      build_images --all --skip-push
  protobuf:
    run: |-
      devspace run protobuf
  push:
    run: |-
      build_images --all

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: plockc/replica:latest
    dockerfile: ../Dockerfile.replica
    context: ../
    tags:
      - latest
      - $(git describe --always --dirty)

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    # Search for the container that runs this image
    imageSelector: replica:latest
    #labelSelector:
    #  app: replica
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: ghcr.io/loft-sh/devspace-containers/go:1.18-alpine
    workingDir: /app/replica
    # Sync files between the local filesystem and the development container
    sync:
      - path: ../:/app
    # Open a terminal and use the following command to start it
    terminal:
      command: ./devspace_start.sh
    persistPaths:
      - path: /go/pkg/mod/cache/download
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - command: git
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "10808"

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  protobuf:
    command: |-
      mkdir -p ./pb
      protoc --go_out=./pb --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --go-grpc_out=./pb data-disk.proto
