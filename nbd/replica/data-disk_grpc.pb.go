// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: data-disk.proto

package replica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataDiskClient is the client API for DataDisk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataDiskClient interface {
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error)
	// rpc Write(WriteReq) returns (Error) {}
	Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error)
}

type dataDiskClient struct {
	cc grpc.ClientConnInterface
}

func NewDataDiskClient(cc grpc.ClientConnInterface) DataDiskClient {
	return &dataDiskClient{cc}
}

func (c *dataDiskClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error) {
	out := new(ReadResp)
	err := c.cc.Invoke(ctx, "/replica.DataDisk/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataDiskClient) Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error) {
	out := new(WriteResp)
	err := c.cc.Invoke(ctx, "/replica.DataDisk/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataDiskServer is the server API for DataDisk service.
// All implementations must embed UnimplementedDataDiskServer
// for forward compatibility
type DataDiskServer interface {
	Read(context.Context, *ReadReq) (*ReadResp, error)
	// rpc Write(WriteReq) returns (Error) {}
	Write(context.Context, *WriteReq) (*WriteResp, error)
	mustEmbedUnimplementedDataDiskServer()
}

// UnimplementedDataDiskServer must be embedded to have forward compatible implementations.
type UnimplementedDataDiskServer struct {
}

func (UnimplementedDataDiskServer) Read(context.Context, *ReadReq) (*ReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDataDiskServer) Write(context.Context, *WriteReq) (*WriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDataDiskServer) mustEmbedUnimplementedDataDiskServer() {}

// UnsafeDataDiskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataDiskServer will
// result in compilation errors.
type UnsafeDataDiskServer interface {
	mustEmbedUnimplementedDataDiskServer()
}

func RegisterDataDiskServer(s grpc.ServiceRegistrar, srv DataDiskServer) {
	s.RegisterService(&DataDisk_ServiceDesc, srv)
}

func _DataDisk_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataDiskServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replica.DataDisk/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataDiskServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataDisk_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataDiskServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replica.DataDisk/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataDiskServer).Write(ctx, req.(*WriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DataDisk_ServiceDesc is the grpc.ServiceDesc for DataDisk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataDisk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replica.DataDisk",
	HandlerType: (*DataDiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _DataDisk_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _DataDisk_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data-disk.proto",
}
